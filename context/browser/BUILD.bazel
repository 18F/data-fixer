package(default_visibility = ["//visibility:public"])

load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("@npm//@bazel/terser:index.bzl", "terser_minified")
load("@npm//@bazel/typescript:index.bzl", "ts_devserver", "ts_library")

ts_library(
    name = "lib",
    srcs = [
        ":index.ts",
    ],
    deps = [
        "//core",
        "//frontend",
        "//runtime/browser",
        "//runtime/mock",
    ],
)

rollup_bundle(
    name = "bundle",
    config_file = "rollup.config.js",
    entry_point = ":index.ts",
    format = "iife",
    deps = [
        ":lib",
        "//core",
        "//frontend",
        "@npm//@rollup/plugin-commonjs",
        "@npm//@rollup/plugin-node-resolve",
        "@npm//rollup-plugin-node-polyfills",
    ],
)

terser_minified(
    name = "bundle.min",
    src = ":bundle",
)

# Serve up the Rollup bundle via ts_devserver. This isn't as efficient as
# letting ts_devserver inject UMD modules, but its easier to manage some of the
# node dependencies if we develop against the Rollup bundle.
ts_devserver(
    name = "devserver",
    additional_root_paths = [
        "datafixer/node_modules/uswds/dist/img",
        "datafixer/node_modules/uswds/dist/fonts",
    ],
    port = 9000,
    static_files = [
        ":bundle",
        ":index.html",
        "//frontend:assets-dev",
    ],
)
